// https://code.visualstudio.com/api/references/theme-color
// https://code.visualstudio.com/docs/getstarted/themes
// https://code.visualstudio.com/api/extension-guides/color-theme

{
	"name": "Two Monokai",
	"type": "dark",
	"colors": {
		"editor.lineHighlightBackground": "#4444447f", // note transparency, used to dim line highlight
		"editorLineNumber.activeForeground": "#78dce8",
		"editorCursor.foreground": "#61afef",
		"statusBar.background": "#333333", // match sidebar
		"statusBar.debuggingBackground": "#333333",
		"statusBar.noFolderBackground": "#333333",
		"statusBar.foreground": "#adadad", // match sidebar icons color
		"tab.inactiveForeground": "#bbbbbb", // not too gray for better readability, default was #969696
		"titleBar.activeBackground": "#333333",
		// derived from Monokai
		// this is actually from Monokai, not from Default Dark or Monokai Dimmed
		// not sure about "fa" part, looks inconsistent, but this is what was picked from screenshot
		"editor.foreground": "#fcfcfa",
		// derived from Default Dark
		"editor.background": "#1e1e1e",
		// massively derived from Monokai Dimmed
		"editorGroupHeader.tabsBackground": "#282828",
		"terminal.ansiWhite": "#ffffff",
	},
	"tokenColors": [
		{
			"name": "Comment",
			"scope": [
				"comment",
				"punctuation.definition.comment"
			],
			"settings": {
				"foreground": "#9a9b99" // from Monokai Dimmed
			}
		},
		{
			"name": "Variables",
			"scope": [
				"variable",
				"variable.other",
				"variable.other.object.access", // first object in chain x->y->z
			],
			"settings": {
				"foreground": "#fcfcfa"
			}
		},
		{
			"name": "Member access, Other Variable, String Link",
			"scope": [
				"variable.other.property", // member access, last object in chain x->y->z
				// "variable.other.object.property", // also member access, middle object in chain x->y->z
				"support.other.variable",
				"string constant.other.placeholder",
				"string.other.link", // detected links will be this color too
			],
			"settings": {
				// has to be different from "storage" otherwise "const x = 10;" won't look nice in JS/TS
				// this color is also used in C's "x->y", for coloring "y"
				"foreground": "#61afef"
			}
		},
		{
			"name": "Colors",
			"scope": [
				"constant.other.color"
			],
			"settings": {
				"foreground": "#fcfcfa"
			}
		},
		{
			"name": "Invalid",
			"scope": [
				"invalid",
				"invalid.illegal"
			],
			"settings": {
				"foreground": "#fcfcfa"
			}
		},
		{
			"name": "Storage",
			"scope": [
				"storage.type", // mostly for C++, also used in JS ("const")
				"storage.modifier.local", // for "local" in Lua
			],
			"settings": {
				"foreground": "#78dce8"
			}
		},
		{
			"name": "Keyword",
			"scope": [
				"keyword",
				"keyword.other",
				"constant.other.color",
				"storage.modifier", // this is strange one, "override" in C++ is storage modifier
				"storage.type.modifier", // another stange one, public/protected/private + final apparently
			],
			"settings": {
				"foreground": "#ff6188"
			}
		},
		// XXX: hmmmm, might not be a bad idea
		// {
		// 	"name": "Punctuation",
		// 	"scope": [
		// 		"punctuation",
		// 		"meta.tag",
		// 		"punctuation.definition.tag",
		// 		"punctuation.separator.inheritance.php",
		// 		"punctuation.definition.tag.html",
		// 		"punctuation.definition.tag.begin.html",
		// 		"punctuation.definition.tag.end.html",
		// 		"punctuation.section.embedded",
		// 	],
		// 	"settings": {
		// 		"foreground": "#fcfcfa"
		// 	}
		// },
		{
			"name": "Tag",
			"scope": [
				"entity.name.tag",
				"meta.tag.sgml",
				"markup.deleted.git_gutter"
			],
			"settings": {
				"foreground": "#ff6188"
			}
		},
		{
			"name": "Function, Special Method",
			"scope": [
				"entity.name.function",
				// somehow this assigns color to constants in arguments list
				// e.g. "ns::call(smtg::CONSTANT);" <- "smtg::CONSTANT" will be colored
				"variable.function",
				"support.function",
				"keyword.other.special-method"
			],
			"settings": {
				"foreground": "#a9dc76"
			}
		},
		{
			"name": "Number, Constant, Function Argument, Tag Attribute, Embedded",
			"scope": [
				"constant.numeric",
				"support.constant",
				// built-in constant (per Solarized Dark)
				"constant.language",
				"meta.preprocessor",
				// user-defined constants (per Solarized Dark)
				"constant.character",
				"constant.escape",
				"keyword.other.unit", // "f" in "12.5f"
			],
			"settings": {
				"foreground": "#ab9df2"
			}
		},
		{
			"name": "Function Argument, Tag Attribute, Embedded",
			"scope": [
				"variable.parameter",
			],
			"settings": {
				"foreground": "#fcfcfa" // don't highlight, doesn't look good in C++ with & or *, also not really helping
			}
		},
		{
			"name": "String, Symbols, Inherited Class, Markup Heading",
			"scope": [
				"string",
				"constant.other.symbol",
				"constant.other.key",
				"entity.other.inherited-class",
				"markup.heading",
				"markup.inserted.git_gutter",
				"meta.group.braces.curly constant.other.object.key.js string.unquoted.label.js"
			],
			"settings": {
				"foreground": "#ffd866"
			}
		},
		// XXX: hmm, not sure about this. left of :: always categorized as namespace even in static function call
		{
			"name": "Namespaces",
			"scope": [
				"entity.name.type.namespace.scope-resolution",
			],
			"settings": {
				// XXX: namespace color is the same as function color
				// so then a call like glm::normalize() is made it's colored uniformly
				// as a side effect, std in std::string is colored too
				"foreground": "#a9dc76"
			}
		},
		{
			"name": "Class, Support",
			"scope": [
				"entity.name",
				"support.type",
				"support.class",
				"support.orther.namespace.use.php",
				"meta.use.php",
				"support.other.namespace.php",
				"markup.changed.git_gutter",
				"support.type.sys-types"
			],
			"settings": {
				"foreground": "#61afef"
			}
		},
		{
			"name": "Entity Types",
			"scope": [
				"support.type"
			],
			"settings": {
				"foreground": "#78dce8"
			}
		},
		{
			"name": "Sub-methods",
			"scope": [
				"entity.name.module.js",
				"variable.import.parameter.js",
				"variable.other.class.js"
			],
			"settings": {
				"foreground": "#ff6188"
			}
		},
		{
			"name": "Language methods",
			"scope": [
				"variable.language"
			],
			"settings": {
				"foreground": "#ff6188"
			}
		},
		{
			"name": "Attributes", // tag attributes (per Solarized Dark)
			"scope": [
				"entity.other.attribute-name"
			],
			"settings": {
				"foreground": "#ab9df2"
			}
		},
		{
			"name": "Regular Expressions",
			"scope": [
				"string.regexp"
			],
			"settings": {
				"foreground": "#ab9df2"
			}
		},
		{
			"name": "Escape Characters",
			"scope": [
				"constant.character.escape"
			],
			"settings": {
				"foreground": "#78dce8"
			}
		},
		{
			"name": "URL",
			"scope": [
				"*url*",
				"*link*",
				"*uri*"
			],
			"settings": {
				"fontStyle": "underline"
			}
		},
		{
			"name": "Decorators",
			"scope": [
				"tag.decorator.js entity.name.tag.js",
				"tag.decorator.js punctuation.definition.tag.js"
			],
			"settings": {
				"foreground": "#78dce8"
			}
		},
		{
			"name": "ES7 Bind Operator",
			"scope": [
				"source.js constant.other.object.key.js string.unquoted.label.js"
			],
			"settings": {
				"foreground": "#ff6188"
			}
		},
		// markdown stuff is coming mostly from Solarized Dark
		// (except actual colors)
		{
			"name": "Markup Quote, Lists",
			"scope": [
				"markup.quote",
				"markup.list",
				"markup.other",
			],
			"settings": {
				"foreground": "#a9dc76"
			}
		},
		{
			"name": "Markup Styling",
			"scope": [
				"markup.bold",
				"markup.italic"
			],
			"settings": {
				"foreground": "#ff6188"
			}
		},
		{
			"name": "Markup Headings", // not actually headings, just ## marks
			"scope": [
				"markup.heading",
				"markup.heading.setext",
				"constant.other.reference.link.markdown", // link anchor
			],
			"settings": {
				"foreground": "#ff6188"
			}
		},
		{
			"name": "Markup Heading Text",
			"scope": [
				"markup.heading entity.name",
			],
			"settings": {
				"foreground": "#ffd866"
			}
		},
		{
			"name": "Markup Inline",
			"scope": [
				"markup.inline.raw",
				"markup.raw",
			],
			"settings": {
				"foreground": "#78dce8"
			}
		},
		{
			"name": "Markdown - Link",
			"scope": [
				"markup.underline.link.markdown",
			],
			"settings": {
				// maybe it's a good idea to have this same color as String Link
				"foreground": "#61afef"
			}
		},
	]
}
